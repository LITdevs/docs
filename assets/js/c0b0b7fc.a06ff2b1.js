"use strict";(self.webpackChunklitdocs=self.webpackChunklitdocs||[]).push([[601],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8945:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={},s="APIs",u={unversionedId:"painfull/modules/apis",id:"painfull/modules/apis",title:"APIs",description:"Structure of an api",source:"@site/docs/painfull/modules/apis.md",sourceDirName:"painfull/modules",slug:"/painfull/modules/apis",permalink:"/painfull/modules/apis",draft:!1,editUrl:"https://github.com/LITdevs/docs/tree/main/docs/painfull/modules/apis.md",tags:[],version:"current",frontMatter:{},sidebar:"painfull",previous:{title:"Technical details",permalink:"/painfull/modules/technical"},next:{title:"Commands",permalink:"/painfull/modules/commands"}},c={},p=[{value:"Calling an API",id:"calling-an-api",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"apis"},"APIs"),(0,l.kt)("p",null,"Structure of an api"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Export"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional?"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"api"),(0,l.kt)("td",{parentName:"tr",align:null},"yesn't"),(0,l.kt)("td",{parentName:"tr",align:null},"This is the recommended place to put all your API functions, to not conflict with other exports")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"initAPIs"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"A function that is called when the bot starts, ",(0,l.kt)("a",{parentName:"td",href:"utils-argument"},"the utils argument")," is passed to the function, this includes the discord client, bot config and apis")))),(0,l.kt)("p",null,"APIs are made accessible anywhere via the utils argument."),(0,l.kt)("h2",{id:"calling-an-api"},"Calling an API"),(0,l.kt)("p",null,"As a real-world example, the CLS API gets the errorAPI like this..."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function initAPIs(utils) {\n    errorAPI = utils.apis["core-error"].api\n')),(0,l.kt)("p",null,"...and can now use it to send alerts like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'errorAPI.error("This is an error, that is DM\'d to the maintainer")\nerrorAPI.info("This is an informational message, that is DM\'d to the maintainer")\n')),(0,l.kt)("p",null,"Commands are also able to use APIs. The third argument of a command's execute function is the ",(0,l.kt)("a",{parentName:"p",href:"utils-argument"},"the utils argument"),", which includes the Discord client, bot configuration, and APIs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n    execute: async function(message, args, util) {\n        let cls = util.apis["core-cls"].api;\n    }\n}\n')),(0,l.kt)("p",null,"It can call the API's functions like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'cls.getString("core", "lang.success")\n// or if you want a long string of stuff\nutil.apis["core-cls"].api.getString("core", "lang.success").replace("{0}", args[0])\n')))}d.isMDXComponent=!0}}]);